#include <stdint.h>
#include "reduce.h"
#include <time.h>
#include <sys/resource.h>
// #include "indcpa.h"
#include "kem.h"
#include "ntt.h"
#include "poly.h"
// #include "assert.h"
// #include "params.h"
#include <stdio.h>
#include <stdlib.h>


int8_t br(int8_t r);
int16_t p_zetas_power(uint8_t index)
{
  return -(p_zetas[index & 127] & ((1 << 15) - (index >> 7))) + (p_zetas[index & 127] & (~((1 << 15) - (index >> 7))));
}


int main() {
    // int32_t pMlKemZetas[128] =
    // {
    // 4088, 3777, 4499, 3625, 3696, 1100, 5225, 5487, 5431, 7560, 5186, 6847, 4805,
    // 5362, 6267, 5980, 2237, 5695, 2088, 2816, 3706, 5675, 1993, 1599, 6198, 1296,
    // 6156, 5124, 1921, 7064, 2830, 4317, 1887, 6871, 7674, 638, 3600, 3266, 3992,
    // 5943, 7285, 3174, 3555, 1881, 6376, 5921, 7002, 438, 5371, 3153, 1535, 7132,
    // 3909, 2535, 2440, 2555, 5638, 6250, 2804, 103, 6360, 6282, 2956, 514, 2919,
    // 2789, 7487, 3417, 2113, 2732, 5296, 3405, 7679, 6766, 5255, 3850, 6627, 1698,
    // 4225, 1166, 5109, 6184, 6331, 4536, 4093, 2224, 2883, 1681, 5925, 3135, 5290,
    // 660, 3989, 730, 7308, 2175, 4938, 921, 6295, 3428, 6148, 1464, 6954, 1521,
    // 6083, 6291, 4919, 3750, 2764, 4846, 3816, 2233, 3480, 2133, 4371, 6513, 5882,
    // 2665, 6898, 6625, 2579, 859, 2160, 5032, 7277, 7195, 1532, 1919
    // };

    // int32_t pqMlKemZetas[128] =
    // {
    // -800936, -10790239, -833631, 5302241, -559992, -1970602, 5905628, -3523243,
    // 10288697, 7316929, 5154759, 1191527, -10781601, 8808389, -1840079, 11403902,
    // -2246067, 4961975, 8589511, -12637256, 10126754, 2975327, 573918, 1067840,
    // -2920975, -10509450, -2831517, -4546327, 594503, -2752726, 8896052, 7985198,
    // 12268889, -11829509, 4188253, 10212334, 3886590, -3301000, 10927234, -2719093, 
    // -182501, -8124395, -1643346, 9164280, -5910915, 6469619, 480992, -8471272, -2415165,
    // -4523363, 9024878, -11845562, -1586455, 9379912, -6493344, 7088243, -5287065, 9919165,
    // -5143570, 7241792, -783967, -4920288, -2194851, -4780944, -6178926, -2839142, 6235043, 
    // -9112709, -2445739, -6129196, -12507359, 2390459, -11253160, -11075875, 6719558, -9608500,
    // 1129396, -1453909, 4851623, 1886233, -3301877, 10110217, 10711153, -9753636, -9275682,
    // -4634235, -9598200, 10566489, -4129171, -10472912, -3560479, -12272189, -7227552,
    // -12078201, -9874071, 7132451, -11658882, 7014111, 11378171, 11517339, -9393071,
    // 2090565, 8380542, 11786573, -4773675, -7717785, -9447616, -2474558, -9523959, -5406275, 
    // 9831377, 12031922, 8857221, 1883614, -2946862, 9004930, -7761405, -2247671, -2717001,
    // -9094510, 2616160, 1030629, 11433939, 9771330, -4309178, -10643255, 8997252, -2655055
    // };
    // poly a;
    // poly b, c;
    // for (int i = 0; i < 256; i++){
    //     a.coeffs[i] = 1;
    //     b.coeffs[i] = 1;
    // } 
    // int t = 1;
    // poly_pqt_ntt(&b, t);
    // poly_pqt_ntt(&a, t);
    // // poly_pqt_basemul_montgomery(&c, &a, &b, 0);
    // poly_pqt_invntt_tomont(&a, t);
    // for(int i = 0; i < 256; i++){
    //     printf("%d, %d \n", pqt_barrett_reduce(KYBER_Q*182640, i%8), (KYBER_Q*182640) % KYBER_PQT[i%8] );
    //     // printf("%d \n", b[i]);
    // }
    // for(int i = 0; i < 128; i++){
    //     printf("%d, ", (pqMlKemZetas[br(i)] + 7681 * 3329) % (7681 * 3329));
    // }
    uint8_t pk[KYBER_PUBLICKEYBYTES];
    uint8_t sk[KYBER_SECRETKEYBYTES];
    uint8_t ss[KYBER_SSBYTES];
    uint8_t ss2[KYBER_SSBYTES];
    uint8_t ct[KYBER_CIPHERTEXTBYTES];
    clock_t tmp, av;
    int tot = 0;
    av = 0;
    for (int i = 0; i <10000; i ++){
        crypto_kem_keypair(pk, sk);
        tmp = clock();
        crypto_kem_enc(ct, ss, pk);
        av += clock() - tmp;
        crypto_kem_dec(ss2, ct, sk);
    }
    printf("%ld, %d \n", av/10000, tot);
    for (int i = 0; i< KYBER_SSBYTES; i++){
        if(ss[i] != ss2[i])
            printf("%d, %d \n", ss[i], ss2[i]);
    }  
    return 0;
}

int8_t br(int8_t r){
    return ((r & 0x1) << 6) | ((r & 0x2) << 4) | ((r & 0x4) << 2) | ((r & 0x8)) | ((r & 0x10) >> 2) | ((r & 0x20) >> 4) | ((r & 0x40) >> 6);
}